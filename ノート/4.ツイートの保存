・ツイートを保存
  ・ツイート投稿ページの実装
    ・newアクションをルーティングを設定(config/routes.rb)
      resources :tweets, only: [:index, :new] #に変更する
    ・newアクションをコントローラーに定義
      ・コントローラーを定義する(app/controllers/tweets_controller.rb)
        #indexアクションの下に記述
        def new
          @tweet = Tweet.new
        end
  ・投稿ビューの作成
    ・ビューファイルの作成(app/views/tweets)
      new.html.erbファイルを作成
    ・ビューファイルの編集(app/views/tweets/new.html.erb)
      <div class="contents row">
        <div class="container">
          <h3>投稿する</h3>
          <%= form_with(model: @tweet, local: true) do |form| %>
            <%= form.text_field :name, placeholder: "Nickname" %>
            <%= form.text_field :image, placeholder: "Image Url" %>
            <%= form.text_area :text, placeholder: "text", rows: "10" %>
            <%= form.submit "SEND" %>
          <% end %>
        </div>
      </div>
    ・ツイート投稿処理の実装
      ・createアクションのルーティングを設定(config/routes.rb)
        # 下記に変更する
        resources :tweets, only: [:index, :new, :create]
      ・フォームからデータ保存を実装
        ・ストロングパラメーター
        ・requireメソッド
        ・permitメソッド
          例 params.require(:モデル名).permit(:キー名, :キー名) # 取得したいキーを指定する
        ・プライベートメソッド
          コントローラーに"private"と記載すれば、以下の記述がプライベートメソッドに変わる
        ・createアクションをコントローラーに定義(app/controllers/tweets_controller.rb)
            #newアクションの下に記述
            def create
              Tweet.create(tweet_params)
            end
            private
            def tweet_params
              params.require(:tweet).permit(:name, :image, :text)
            end
  ・投稿完了ビューの作成
  