・マイページの実装
  ・ツイートにユーザー情報を追加
    特定のユーザーが呟いたツイート一覧を取得できる
    ツイートの削除を行う際につぶやいた本人しか削除できないように設定できる
    ・tweetsテーブルにカラムを追加する
      tweetsテーブルにuser_idカラムをinteger型で追加
      % rails g migration AddUserIdToTweets user_id:integer
      % rails db:migrate
      % rails s #サーバーの再起動
  ・ツイート保存時にユーザー情報も追加する
    ・イントロ
      ・current_userメソッド
        現在ログインしているユーザーの情報を取得できる
      ・mergeメソッド
        mergeメソッドを利用して、paramsとuser_idの情報を統合する
        例params.~省略~.merge(user_id: current_user.id)
    ・コントローラーに定義する(app/controllers/tweets_controller.rb)
      def tweet_params
        params.require(:tweet).permit(:name, :image, :text).merge(user_id: current_user.id) #追記
      end
  ・アソシエーション
      モデル同士の関連付け
    ・イントロ
      ・has_manyメソッド
        1対多のつながりを関連付ける
        例 has_many :tweets
      ・belongs_toメソッド
        1対1の繋がりを関連付ける
        例 belongs_to :user
    ・アソシエーションの定義(app/models/user.rb)
      devise :database_authenticatable, :registerable,
            :recoverable, :rememberable, :validatable
      has_many :tweets #追記
    ・アソシエーションの定義(app/models/tweet.rb)
      validates :text, presence: true
      belongs_to :user
  ・マイページの作成
    ・ユーザーに関するshowアクションのルーティングを設定(config/routes.rb)
      resources :tweets
      resources :users, only: :show #追記
    ・マイページボタンを投稿一覧に追加する
      ・ビューの編集(app/views/layouts/application.html.erb)
        <% if user_signed_in? %>
          <div class="user_nav grid-6">
        #下記を追記する
            <span><%= current_user.nickname %>
              <ul class="user__info">
                <li>
                  <%= link_to "マイページ", "/users/#{current_user.id}" %>
                  <%= link_to "ログアウト", destroy_user_session_path, method: :delete %>
                </li>
              </ul>
            </span>
        ＃ここまで
            <%= link_to "投稿する", new_tweet_path, class: "post" %>
          </div>
        <% else %>
  ・